package algorithm.baekjoon.etc;

import java.util.Arrays;

public class q4673 {
	/*
	 * ���� �ѹ��� 1949�� �ε� ������ D.R. Kaprekar�� �̸� �ٿ���. 
	 * ���� ���� n�� ���ؼ� d(n)�� n�� n�� �� �ڸ����� ���ϴ� �Լ���� ��������. ���� ���, d(75) = 75+7+5 = 87�̴�.
	 * ���� ���� n�� �־����� ��, �� ���� �����ؼ� n, d(n), d(d(n)), d(d(d(n))), ...�� ���� ���� ������ ���� �� �ִ�.
	 * ���� ���, 33���� �����Ѵٸ� ���� ���� 33 + 3 + 3 = 39�̰�, 
	 * �� ���� ���� 39 + 3 + 9 = 51, ���� ���� 51 + 5 + 1 = 57�̴�. �̷������� ������ ���� ������ ���� �� �ִ�. 
	 * 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
	 * 
	 * n�� d(n)�� �����ڶ�� �Ѵ�. ���� �������� 33�� 39�� �������̰�, 39�� 51�� ������, 51�� 57�� �������̴�. 
	 * �����ڰ� �� ������ ���� ��쵵 �ִ�. ���� ���, 101�� �����ڰ� 2��(91�� 100) �ִ�. 
	 * 
	 * �����ڰ� ���� ���ڸ� ���� �ѹ���� �Ѵ�. 100���� ���� ���� �ѹ��� �� 13���� �ִ�. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
	 * 10000���� �۰ų� ���� ���� �ѹ��� �� �ٿ� �ϳ��� ����ϴ� ���α׷��� �ۼ��Ͻÿ�.
	 * 
	 * �Է��� ����.
	 * 10,000���� �۰ų� ���� ���� �ѹ��� �� �ٿ� �ϳ��� �����ϴ� ������ ����Ѵ�.
	 * 
	 * �������
		1
		3
		5
		7
		9
		20
		31
		42
		53
		64
		 |
		 |       <-- a lot more numbers
		 |
		9903
		9914
		9925
		9927
		9938
		9949
		9960
		9971
		9982
		9993
	 */
	
	/*
	 * ���� �ذ� ����
	 * 1. �켱 �� �ڸ����� ���� ���ϴ� ������� �����غ���
	 * �� �ڸ� ���� ���� ���ϱ����ؼ��� ���� ���� n�� ���� 0�� �� ������, 10���� �����ش�.
	 * �� �������� �ݺ��ϸ鼭 �߻��ϴ� �������� �� ���ϸ� �� �ڸ� ���� ���� �ȴ�.
	 * 
	 * 2. �����ڰ� ���� ���� ��� üũ�� ���ΰ�
	 * ������ ���� ���� n�� ���� n, d(n), d(d(n)), d(d(d(n))), ...�� ���� ���� ������ ��������ٰ� �ߴ�.
	 * ��� d(n) ��ȯ�� �� ���� ���ؼ� selfNumber �迭�� false���� �Է��Ѵ�.
	 * 1 ~ 10,000 ������ ���� ���� selfNumber �迭�� ���� true�� ���� ����Ѵ�.
	 */
	private static boolean[] selfNumber = new boolean[10040];
	
	public static void main(String[] args) {
		Arrays.fill(selfNumber, true);

		for(int i=1;i<=10000;i++){
			d(i);
			if(selfNumber[i]){
				System.out.println(i);
			}
		}
	}
	// d(n) �Լ� 
	private static int d(int num){
		int next = 0;
		next = num + positionalSum(num);
	
		if(next <= 5){
			System.out.print("d("+num+") = "+next+" ");
			selfNumber[next] = false;
			return d(next);
		}else{
			System.out.println("d("+num+") = "+next);
			selfNumber[next] = false;
		}
		return next;
	}
	//�� �ڸ��� �� ��
	private static int positionalSum(int num){
		int sum = 0;
		int rem = num % 10;	//��
		int qut = num / 10; //������
		
		sum = rem;
		if(qut != 0){
			return sum + positionalSum(qut);
		}
			
		return sum;
	}
}
